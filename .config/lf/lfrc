# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
#set shellopts '-eu'
set shellopts '-e:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set icons

# auto change panel amount based on terminal size
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# open images in sxiv
cmd pv-all-imgs &{{
    file --mime-type ./* | \
                         grep image/ | \
                         awk -F':' '{print $1}' | \
                         sxiv -a -t -
}}

map Oi pv-all-imgs

# move files async with rsync
#cmd paste &{{
    #set -- $(lf -remote load)
    #mode="$1"
    #shift
    #case "$mode" in
        #copy)
            #rsync -av --ignore-existing --progress -- "$@" . |
            #stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            #while IFS= read -r line; do
                #lf -remote "send $id echo $line"
            #done
            #;;
        #move) mv -n -- "$@" .;;
    #esac
    #lf -remote "send load"
    #lf -remote "send clear"
#}}

# leave some space at the top and the bottom of the screen
set scrolloff 10

set number on
set relativenumber on
set color256 on
set drawbox on
set incsearch on

# set previewer
set previewer ~/.config/lf/pv.sh
map i $~/.config/lf/pv.sh $f | less -R

# Image preview
#map - $~/.config/lf/draw_img.sh $f

# use enter for shell commands
map <enter> shell

cmd fzf_jump ${{
   res="$(fzf --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-p> :fzf_jump

# mkdir command
cmd mkdir %mkdir "$(echo $* | tr ' ' '\ ')"

# execute current file (must be executable)
map x $$f
map X !$f

# upload to 0x0
map Up $0x0 -f "$f"

map Ex extract "$fs"

# open stuff with rifle
map o !rifle $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
#cmd open ${{
    #case $(file --mime-type $f -b) in
        #text/*) $EDITOR $fx;;
        #*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    #esac
#}}
cmd open ${{
  bgopen(){ setsid $@>/dev/null 2>&1 & }
  open()
  {
    case $(file --mime-type -Lb "$@") in
      video/*                  ) bgopen mpv "$fx";;
      audio/*                  ) mpv "$fx";;
      text/*|application/json  ) $EDITOR "$fx";;
      image/gif                ) bgopen sxiv -ba "$fx";;
      image/*                  ) bgopen sxiv -b "$fx";;
      application/pdf|application/epub+zip ) bgopen zathura "$fx";;
      application/pgp-signature) $EDITOR "$fx";;
      inode/symlink            ) open "$(readlink -f $fx)";;
      *) for f in $fx; do $OPENER $f>/dev/null 2>&1 & done;;
    esac
  }
  open "$f"
}}

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

map Dd trash
map DD delete

map br $~/.config/lf/bulkrename.sh "$fs"

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
